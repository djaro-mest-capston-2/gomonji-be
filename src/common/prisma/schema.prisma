// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
// generator client {
//   provider   = "prisma-client-js"
//   engineType = "library"
// }

generator client {
  provider      = "prisma-client-js"
  engineType    = "binary"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserTypeEnum {
  Person
  Organization
}

enum UserRoleEnum {
  User
  Agency
  Admin
}

enum GenderEnum {
  Male
  Female
  Unknown
}

enum AddressTypeEnum {
  Physical
  Postal
  Home
  Office
  Trip
  Other
}

enum CurrencyEnum {
  USD
  EUR
  GBP
  NGN
  GHS
  KES
  ZAR
}

enum TripCategoryEnum {
  Business
  Vacation
  Family
  Honeymoon
  Adventure
  Conference
  Group
  Unknown
}

enum PhotoTypeEnum {
  Avatar
  Trip
  Unknown
}

enum AccountStatusEnum {
  Active
  Suspended
  Closed
}

enum TransactionStatusEnum {
  Pending
  Paid
}

enum InvoiceStatusEnum {
  Draft
  AwaitingApproval
  AwaitingPayment
  Paid
  Void
}

enum InvoiceDatePeriodEnum {
  Current
  Following
}

enum SocialMediaEnum {
  Facebook
  Instagram
  Twitter
  Linkedin
  YouTube
  Tiktok
  Pinterest
}

enum BookingStatusEnum {
  Pending
  Confirmed
  Cancelled
}

model Country {
  id            String    @id @default(uuid()) @db.Uuid
  name          String    @unique() @db.VarChar(50)
  iso2          String    @unique() @db.Char(2)
  iso3          String    @unique() @db.Char(3)
  isoNumeric    String    @db.VarChar(3)
  phoneCode     String    @db.VarChar(50)
  continent     String?   @db.VarChar(20)
  capital       String    @db.VarChar(50)
  timeZone      String    @db.VarChar(50)
  currency      String    @db.VarChar(20)
  symbol        String?   @db.VarChar(5)
  wholePart     String?   @db.VarChar(20)
  fractionPart  String?   @db.VarChar(20)
  languageCodes String?   @db.VarChar(100)
  perUserPrice  Float     @default(0.00) @db.DoublePrecision()
  status        Boolean   @default(false) @db.Boolean
  createdAt     DateTime  @default(now()) @db.Timestamptz(6)
  createdBy     String?   @db.Uuid
  updatedAt     DateTime  @default(now()) @updatedAt @db.Timestamptz(6)
  updatedBy     String?   @db.Uuid
  states        State[]
  profile       Profile[]

  @@map("country")
}

model State {
  id        String    @id @default(uuid()) @db.Uuid
  name      String    @unique() @db.VarChar(50)
  iso2      String    @unique() @db.VarChar(10)
  countryId String    @db.Uuid
  status    Boolean   @default(true) @db.Boolean
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  createdBy String?   @db.Uuid
  updatedAt DateTime  @updatedAt @db.Timestamptz(6)
  updatedBy String?   @db.Uuid
  country   Country   @relation(fields: [countryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  profile   Profile[]

  @@map("state")
}

model Address {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  tripId    String?  @db.Uuid
  name      String   @db.VarChar(50)
  street    String   @db.VarChar(150)
  city      String   @db.VarChar(50)
  state     String   @db.VarChar(50)
  zip       String   @db.VarChar(10)
  status    Boolean  @default(true) @db.Boolean
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  createdBy String?  @db.Uuid
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  updatedBy String?  @db.Uuid
  trip      Trip?    @relation(fields: [tripId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("address")
}

model User {
  id                String        @id @default(uuid()) @db.Uuid
  email             String        @unique @db.VarChar(100)
  password          String        @db.VarChar(100)
  roleId            String?       @db.Uuid
  gender            GenderEnum    @default(Unknown)
  type              UserTypeEnum  @default(Person)
  lastLogin         DateTime?     @db.Timestamptz(6)
  lastLoginIp       String?       @db.VarChar(50)
  defaultPage       String?       @db.VarChar(50)
  passwordUpdatedAt DateTime?     @default(now()) @db.Timestamptz(6)
  passwordLockedAt  DateTime?     @db.Timestamptz(6)
  passwordHistory   Json?         @db.JsonB
  passwordAttempt   Int?          @db.SmallInt
  status            Boolean       @default(false) @db.Boolean
  createdAt         DateTime      @default(now()) @db.Timestamptz(6)
  createdBy         String?       @db.Uuid
  updatedAt         DateTime      @default(now()) @updatedAt @db.Timestamptz(6)
  updatedBy         String?       @db.Uuid
  role              Role?         @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  profile           Profile?
  trips             Trip[]
  billing           Billing[]
  address           Address[]
  photos            Photo[]
  socialMedia       SocialMedia[]
  Booking           Booking[]
  Transaction       Transaction[]

  @@map("user")
}

model Profile {
  id          String   @id @default(uuid()) @db.Uuid
  userId      String   @unique @db.Uuid
  countryId   String?  @db.Uuid
  stateId     String?  @db.Uuid
  phoneNo     String?  @db.VarChar(15)
  firstName   String   @db.VarChar(100)
  lastName    String   @db.VarChar(100)
  brandName   String?  @db.VarChar(100)
  companyName String?  @db.VarChar(100)
  background  String?  @db.VarChar(100)
  website     String?  @db.VarChar(100)
  description String?  @db.VarChar(255)
  status      Boolean  @default(true) @db.Boolean
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  createdBy   String?  @db.Uuid
  updatedAt   DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  updatedBy   String?  @db.Uuid
  user        User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  country     Country? @relation(fields: [countryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  state       State?   @relation(fields: [stateId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("user_profile")
}

model SocialMedia {
  id        String          @id @default(uuid()) @db.Uuid
  userId    String          @unique @db.Uuid
  name      SocialMediaEnum
  status    Boolean         @default(true) @db.Boolean
  createdAt DateTime        @default(now()) @db.Timestamptz(6)
  createdBy String?         @db.Uuid
  updatedAt DateTime        @default(now()) @updatedAt @db.Timestamptz(6)
  updatedBy String?         @db.Uuid
  user      User            @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("social_media")
}

model Role {
  id              String               @id @default(uuid()) @db.Uuid
  name            String               @unique() @db.VarChar(50)
  description     String?              @db.VarChar(500)
  code            String?              @unique() @db.VarChar(20)
  type            UserRoleEnum         @default(User)
  defaultPage     String?              @db.VarChar(50)
  status          Boolean              @default(true) @db.Boolean
  createdAt       DateTime             @default(now()) @db.Timestamptz(6)
  createdBy       String?              @db.Uuid
  updatedAt       DateTime             @default(now()) @updatedAt @db.Timestamptz(6)
  updatedBy       String?              @db.Uuid
  users           User[]
  menuPermissions RoleMenuPermission[]

  @@map("role")
}

model RoleMenuPermission {
  id         String   @id @default(uuid()) @db.Uuid
  roleId     String   @unique @db.Uuid
  permission Boolean  @default(false) @db.Boolean
  status     Boolean  @default(true) @db.Boolean
  createdAt  DateTime @default(now()) @db.Timestamptz(6)
  createdBy  String?  @db.Uuid
  updatedAt  DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  updatedBy  String?  @db.Uuid
  role       Role     @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("role_menu_permission")
}

model Trip {
  id               String           @id @default(uuid()) @db.Uuid
  userId           String           @db.Uuid
  destination      String           @db.VarChar(150)
  title            String           @db.VarChar(150)
  description      String?          @db.VarChar(255)
  price            String           @db.VarChar(50)
  currency         CurrencyEnum     @default(USD)
  category         TripCategoryEnum @default(Unknown)
  minimumAge       Int?
  maximumAge       Int?
  minimumGroupSize Int?
  maximumGroupSize Int?
  noOfPeople       Int?
  tripStarts       DateTime         @default(now()) @db.Timestamptz(6)
  tripEnds         DateTime?        @db.Timestamptz(6)
  status           Boolean          @default(true) @db.Boolean
  createdAt        DateTime         @default(now()) @db.Timestamptz(6)
  createdBy        String?          @db.Uuid
  updatedAt        DateTime         @default(now()) @updatedAt @db.Timestamptz(6)
  updatedBy        String?          @db.Uuid
  user             User             @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  address          Address[]
  tripPhotos       Photo[]
  itenary          TripItenary[]
  Booking          Booking[]
  Transaction      Transaction[]

  @@map("trip")
}

model TripItenary {
  id          String   @id @default(uuid()) @db.Uuid
  tripId      String   @unique @db.Uuid
  day         Int      @default(1)
  name        String   @db.VarChar(50)
  description String?  @db.VarChar(255)
  status      Boolean  @default(true) @db.Boolean
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  createdBy   String?  @db.Uuid
  updatedAt   DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  updatedBy   String?  @db.Uuid
  trip        Trip     @relation(fields: [tripId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("trip_itenary")
}

model Booking {
  id            String            @id @default(uuid()) @db.Uuid
  userId        String            @db.Uuid
  tripId        String            @db.Uuid
  noOfPeople    Int               @default(1)
  totalAmount   String            @db.VarChar(50)
  status        Boolean           @default(true) @db.Boolean
  createdAt     DateTime          @default(now()) @db.Timestamptz(6)
  createdBy     String?           @db.Uuid
  updatedAt     DateTime          @default(now()) @updatedAt @db.Timestamptz(6)
  updatedBy     String?           @db.Uuid
  user          User              @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  trip          Trip              @relation(fields: [tripId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  bookingStatus BookingStatusEnum @default(Pending)
  invoice       Invoice[]
  transaction   Transaction[]

  @@unique([userId, tripId])
  @@map("booking")
}

model Photo {
  id        String        @id @default(uuid()) @db.Uuid
  tripId    String?       @unique @db.Uuid
  userId    String?       @unique @db.Uuid
  url       String
  photoType PhotoTypeEnum @default(Unknown)
  status    Boolean       @default(true) @db.Boolean
  createdAt DateTime      @default(now()) @db.Timestamptz(6)
  createdBy String?       @db.Uuid
  updatedAt DateTime      @default(now()) @updatedAt @db.Timestamptz(6)
  updatedBy String?       @db.Uuid
  trip      Trip?         @relation(fields: [tripId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user      User?         @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("photo_file")
}

model Billing {
  id         String   @id @default(uuid()) @db.Uuid
  userId     String   @unique @db.Uuid
  cardNumber String   @unique @db.VarChar(16)
  cardType   String   @db.VarChar(50)
  cardName   String   @db.VarChar(50)
  cardExpiry String   @db.VarChar(5)
  cardCvv    String   @db.VarChar(3)
  commission String?  @db.VarChar(5)
  discount   String?  @db.VarChar(5)
  status     Boolean  @default(true) @db.Boolean
  createdAt  DateTime @default(now()) @db.Timestamptz(6)
  createdBy  String?  @db.Uuid
  updatedAt  DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  updatedBy  String?  @db.Uuid
  user       User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("billing")
}

model Transaction {
  id        String                @id @default(uuid()) @db.Uuid
  userId    String                @db.Uuid
  tripId    String                @db.Uuid
  amount    String                @db.VarChar(50)
  status    TransactionStatusEnum @default(Pending)
  createdAt DateTime              @default(now()) @db.Timestamptz(6)
  createdBy String?               @db.Uuid
  updatedAt DateTime              @default(now()) @updatedAt @db.Timestamptz(6)
  updatedBy String?               @db.Uuid
  user      User                  @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  trip      Trip                  @relation(fields: [tripId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  invoice   Invoice[]
  Booking   Booking?              @relation(fields: [bookingId], references: [id])
  bookingId String?               @db.Uuid

  @@map("transaction")
}

model Invoice {
  id            String       @id @default(uuid()) @db.Uuid
  userId        String?      @db.Uuid
  tripId        String?      @db.Uuid
  amount        String       @db.VarChar(50)
  name          String       @db.VarChar(50)
  status        Boolean      @default(true) @db.Boolean
  createdAt     DateTime     @default(now()) @db.Timestamptz(6)
  createdBy     String?      @db.Uuid
  updatedAt     DateTime     @default(now()) @updatedAt @db.Timestamptz(6)
  updatedBy     String?      @db.Uuid
  Booking       Booking?     @relation(fields: [bookingId], references: [id])
  bookingId     String?      @db.Uuid
  Transaction   Transaction? @relation(fields: [transactionId], references: [id])
  transactionId String?      @db.Uuid

  @@map("invoice")
}
